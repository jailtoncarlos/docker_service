ARG DEV_IMAGE=python-base-user:latest
FROM ${DEV_IMAGE} AS app-dev

ARG WORK_DIR
ARG REQUIREMENTS_FILE
ARG USER_NAME

# Persistir as variáveis como ambiente no runtime
ENV WORK_DIR=${WORK_DIR}
ENV REQUIREMENTS_FILE=${REQUIREMENTS_FILE}
ENV USER_NAME=${USER_NAME}

# diciona o diretório especificado em $WORK_DIR como um "diretório seguro"
# na configuração global do Git.
RUN git config --global --add safe.directory $WORK_DIR

# Defina o usuário padrão para o container
USER $USER_NAME

# Definir o diretório de trabalho usando o argumento passado
# diretório padrão onde o CMD será executado
WORKDIR $WORK_DIR

# Adicionar os arquivos da aplicação
COPY --chown=$USER_NAME:$USER_NAME . $WORK_DIR

# Install requirements
# RUN pip install --no-cache-dir --user -r requirements/dev.txt
# --mount=type=cache,target=/root/.cache/pip é uma opção avançada do Docker,
# introduzida no BuildKit (um recurso mais recente do Docker para melhorar a
# eficiência da construção de imagens). Ela cria um cache temporário durante
# o processo de construção.
# RUN --mount=type=cache,target=/root/.cache/pip pip install -r ${REQUIREMENTS_FILE}
# RUN --mount=type=cache,target=/opt/.cache pip install -r ${REQUIREMENTS_FILE}
RUN --mount=type=cache,target=/opt/.cache pip install --user -r ${REQUIREMENTS_FILE}

# Incluir o diretório $HOME/.local/bin no PATH
ENV PATH="$PATH:$HOME/.local/bin"

WORKDIR $WORK_DIR

CMD ["/bin/sh", "-c", "echo 'Starting dev container'; sleep infinity"]