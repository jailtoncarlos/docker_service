# Define uma imagem base do Python com Debian Slim Bullseye para otimizar a leveza da imagem
ARG PYTHON_BASE_IMAGE=python:3.12-slim-bullseye
FROM ${PYTHON_BASE_IMAGE} AS python-base

# Variáveis de ambiente
# Desabilita o buffering de saída padrão do Python para que logs sejam exibidos em tempo real
ENV PYTHONUNBUFFERED 1

# Impede o Python de gerar arquivos .pyc (bytecode) nos diretórios de origem
ENV PYTHONDONTWRITEBYTECODE 1

# Define o diretório de instalação do Poetry
ENV POETRY_HOME=/usr/local

# Configuração para que o sistema não peça interação durante a instalação
ENV DEBIAN_FRONTEND noninteractive

# Configura a localidade e fuso horário
ENV LANG pt_BR.UTF-8
ENV LANGUAGE pt_BR:pt
ENV LC_ALL pt_BR.UTF-8
ENV TZ="America/Fortaleza"

# Define temporariamente o idioma como C.UTF-8
RUN export LANG=C.UTF-8

# Otimiza a instalação de pacotes ao usar caches para listas de pacotes
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
    && sed -i -e 's/ main/ main contrib non-free/g' /etc/apt/sources.list

# Instalação de pacotes essenciais e dependências do sistema
RUN apt-get update && apt-get install -yqq --fix-missing --no-install-recommends \
        wget gnupg2 unzip \
        pip python3-setuptools python3-wheel \
        locales vim openssh-server git build-essential \
        nginx cron libldap2-dev libsasl2-dev libpq-dev ghostscript \
        libjpeg-dev libfreetype6-dev zlib1g-dev \
        freetds-dev libxmlsec1-dev libxml2-dev libxslt1-dev \
        libblas-dev liblapack-dev libatlas-base-dev gfortran \
        libglu1-mesa libcairo2 libcairo2-dev libcups2 libdbus-glib-1-2 libxinerama1 libsm6 \
        tmpreaper libgdk-pixbuf2.0-0 libffi-dev shared-mime-info \
        python3-cffi libpango-1.0-0 libpangocairo-1.0-0 \
        ntpdate swig openssl libssl-dev libxrender-dev  \
        git-core libx11-dev libxext-dev ttf-mscorefonts-installer libfontconfig1-dev fontconfig curl qpdf \
    && apt-get -y autoremove && apt-get clean \
    && rm -rf /var/cache/apt/* && rm -rf /var/lib/apt/lists/*

# Atualiza o pip, instala pipenv e uv, além de Poetry para gerenciamento de pacotes
RUN pip install -U pip pipenv uv && \
    curl -sSL https://install.python-poetry.org | python -

# Configura a localidade para pt_BR.UTF-8
RUN echo "pt_BR.UTF-8 UTF-8" >> /etc/locale.gen
RUN locale-gen pt_BR.UTF-8

# Cria um link simbólico para o Ghostscript, necessário para manipulação de PDFs
RUN ln -s /usr/bin/gs /usr/local/bin/gs

# Instala o NLTK e baixa pacotes de dados (punkt e stopwords) para processamento de linguagem
RUN --mount=type=cache,target=/root/.cache/pip pip install nltk==3.8
RUN python -c "import nltk; \
    nltk.download('punkt', download_dir='/var/www/nltk_data'); \
    nltk.download('stopwords', download_dir='/var/www/nltk_data');"

# Adiciona o wkhtmltopdf para conversão de HTML para PDF
ADD https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz /root/wkhtmltox.tar.xz
# Extrai o wkhtmltopdf, move os executáveis para /usr/bin e atualiza o cache de fontes
RUN tar -xvf /root/wkhtmltox.tar.xz -C /root && \
    mv /root/wkhtmltox/bin/wkhtmlto* /usr/bin && \
    fc-cache -f -v

# Google Chrome Stable: É o navegador completo, a versão estável do Google Chrome,
# utilizada por usuários para navegação e, em automação, para realizar as ações simuladas
# nos testes (como abrir páginas, clicar em links etc.).

# ChromeDriver: É um binário que atua como intermediário entre ferramentas de automação (como Selenium)
# e o navegador Chrome. Ele traduz os comandos de automação em ações reais no navegador.

# Instala o Google Chrome Stable e configura o ChromeDriver para
# testes automatizados
# Adiciona a chave GPG do Google e o repositório para o Chrome
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list


# Instala o navegador Google Chrome Stable
RUN apt-get update && apt-get install -yqq \
    --fix-missing --no-install-recommends \
    google-chrome-stable \
    && apt-get -y autoremove && apt-get clean \
    && rm -rf /var/cache/apt/*  \
    && rm -rf /var/lib/apt/lists/*

# Baixa e instala o ChromeDriver (navegador Google Chrome Stable)
# para  testes automatizados
# descompactando para /usr/local/bin
RUN wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip  \
    && unzip chromedriver_linux64.zip  \
    && mv chromedriver /usr/local/bin/chromedriver  \
    && rm chromedriver_linux64.zip

# Docker build example
# docker build -t python-base:latest -f /home/jailton/workstation/sdocker/dockerfiles/Dockerfile-base-python .
